INDEX
-----------

1) FREQUENCY COUNT MAPPING FOR 'for loop'


========================================================
1) FREQUENCY COUNT MAPPING FOR 'for loop'
========================================================

a)

	for(int i = 0; i < n; i++) {
		for(int j = 0; j<n; j++) {
			C[i][j] = A[i] + B[j]							----> runs n^2 times
		}
	}


b) for(int i = 0; i < n; i++) {
		for(int j = 0; j<n; j++) {
			for(int k = 0; k<n; k++) {
				C[i][j] = C[i][j] + A[i][k] * B[k][j]		----> runs n^3 times
			}
		}
	}
	
	
c)  for(int i = 0; i < n; i = i + 2) {
		.......												----> runs n/2 times
	}
	
	i progresses like 0, 2, 4, 6, 8, 10, ... n
	
	
	for(int i = 0; i < n; i = i + 3) {
		.......												----> runs n/3 times
	}
	
	i progresses like 0, 3, 6, 9, ... n


d) Write a loop, so that it should run squareroot(n) times without calculating squareroot(n).

Solution: We should add loop breaking condition on a statement inside the loop which progresses with 'i' in arithmetic series.

	arithmetic series -> 1 + 2 + 3 + 4 + .... n = n(n+1)/2

	int x = 0;
	for(int i = 0; x < n; i++) {
		x = x + i;											----> runs squareroot(n) times
	}
	
--------------------	
	i		x
--------------------	
	0		0 + 0
	1		(0) + 1
	2		(0 + 1) + 2
	3		(0 + 1 + 2) + 3
	4		(0 + 1 + 2 + 3) + 4
	5		(0 + 1 + 2 + 3 + 4) + 5
	K		0 + 1 + 2 + 3 + 4 + ..... K
	
	K(K+1)/2 < n
	K(K+1) < 2n
	K^2 + K < 2n
	K^2 < n
	K = squarerooot(n)
	
	
	for(int i=0; i * i < n; i++) {
		......												----> runs squareroot(n) times.
	}
	
	i * i < n can be written like i < squareroot(n)

	
e) Write a loop which will execute statement in arithmetic series.

		arithmetic series -> 1 + 2 + 3 + 4 + .... n = n(n+1)/2

	for(int i = 0; i < n; i++) {
		for(int j = 0; j<i; j++) {
			......											----> runs n(n+1)/2 times
		}
	}
	
	
f) 

	for(int i = 1; i < n; i = i * 2) {
		.......												-----> runs log2(n) times
	}
	
	i = 1 * 2 * 2 * 2 * 2 * 2 .... K times = 2^K
	
	for(int i = 1; i < n; i = i * 3) {
		.......												-----> runs log3(n) times
	}
	
	i = 1 * 3 * 3 * 3 * 3 * 3 .... K times = 3^K
	
	
	for(int i = n; i > = 1; i = i / 2) {
		.......												-----> runs log2(n) times
	}
	
	i = n, n/2, n/2^2, n/2^3 ... n/2^k
	
	
g) 

	for(int i = 0; i < n; i++) {
		for(int j = 1; i < n; j = j * 2) {
			.......												-----> runs n(log2(n)) times
		}											
	}





====================================


